# automatically generated by the FlatBuffers compiler, do not modify

# namespace: UdpInput

import flatbuffers

# /// Root input type
class Input(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInput(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Input()
        x.Init(buf, n + offset)
        return x

    # Input
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Verson of the data structure
    # Input
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1

# /// Data timestamp [ms] since epoch
    # Input
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

# /// ID of the data source
    # Input
    def SourceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Input
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

# /// Data content
    # Input
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def InputStart(builder): builder.StartObject(5)
def InputAddVersion(builder, version): builder.PrependUint32Slot(0, version, 1)
def InputAddTimestamp(builder, timestamp): builder.PrependUint64Slot(1, timestamp, 0)
def InputAddSourceId(builder, sourceId): builder.PrependUint16Slot(2, sourceId, 0)
def InputAddDataType(builder, dataType): builder.PrependUint8Slot(3, dataType, 0)
def InputAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def InputEnd(builder): return builder.EndObject()
