# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Feed

import flatbuffers

# /// Object information
class Object(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObject(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Object()
        x.Init(buf, n + offset)
        return x

    # Object
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Object identifier
    # Object
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Object type
    # Object
    def ObjectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

# /// Vehicle type
    # Object
    def VehicleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

# /// Dimensions
    # Object
    def Dimensions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Dimensions import Dimensions
            obj = Dimensions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Motion state
    # Object
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Motion import Motion
            obj = Motion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Electronics state
    # Object
    def Electronics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Electronics import Electronics
            obj = Electronics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ObjectStart(builder): builder.StartObject(6)
def ObjectAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def ObjectAddObjectType(builder, objectType): builder.PrependUint8Slot(1, objectType, 0)
def ObjectAddVehicleType(builder, vehicleType): builder.PrependUint8Slot(2, vehicleType, 0)
def ObjectAddDimensions(builder, dimensions): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dimensions), 0)
def ObjectAddMotion(builder, motion): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(motion), 0)
def ObjectAddElectronics(builder, electronics): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(electronics), 0)
def ObjectEnd(builder): return builder.EndObject()
